# Copyright (c) 2022 by Yann39
#
# This file is part of Chachatte Team GraphQL application.
#
# Chachatte Team GraphQL is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Chachatte Team GraphQL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Chachatte Team GraphQL. If not, see <http://www.gnu.org/licenses/>.

schema {
    query: Query
    mutation: Mutation
}

# java.time.LocalDateTime implementation
scalar LocalDateTime

# java.lang.Long implementation
scalar Long

type Query {
    getAllNews: [News]
    getAllNewsFilteredPaginated(text: String, pageNumber: Int, pageSize: Int, sortBy: String, sortDirection: String): [News]
    getNewsById(id: Long!): News

    getAllMembers: [Member]
    getMemberById(id: Long!): Member
    getMemberByEmail(email: String!): Member
    getMembersFiltered(text: String): [Member]

    getAllEvents: [Event]
    getEventsByYear(year: Int!): [Event]
    getEventsByMonthAndYear(month: Int!, year: Int!): [Event]
    getEventsByDayAndMonthAndYear(day: Int!, month: Int!, year: Int!): [Event]
    getEventById(id: Int!): Event
    getEventsByTitle(title: String!): [Event]

    getAllTracks: [Track]
    getTrackById(id: Int!): Track
}

type Mutation {
    createNews(title: String!, catchLine: String!, content: String!, newsDate: String!, memberId: Long!): News
    updateNews(newsId: Long!, title: String!, catchLine: String!, content: String!, newsDate: String!, memberId: Long!): News
    deleteNews(newsId: Long!): News
    likeNews(newsId: Long!, memberId: Long!): News
    unlikeNews(newsId: Long!, memberId: Long!): News

    createMember(firstName: String!, lastName: String!, email: String!, phone: String, avatarUrl: String, bike: String, active: Boolean!, admin: Boolean!): Member
    updateMember(memberId: Long!, firstName: String!, lastName: String!, email: String!, phone: String, avatarUrl: String, bike: String, active: Boolean!, admin: Boolean!): Member
    deleteMember(memberId: Long!): Member

    createEvent(title: String!, description: String!, startDate: String!, endDate: String!, trackId: Long!, organizer: String!, price: Float!, memberId: Long!): Event
    updateEvent(eventId: Long!, title: String!, description: String!, startDate: String!, endDate: String!, trackId: Long!, organizer: String!, price: Float!, memberId: Long!): Event
    deleteEvent(eventId: Long!): Event

    createTrack(name: String!, distance: Int!, lapRecord: Int!, website: String!, latitude: Float!, longitude: Float!): Track
    updateTrack(trackId: Long!, name: String!, distance: Int!, lapRecord: Int!, website: String!, latitude: Float!, longitude: Float!): Track
    deleteTrack(trackId: Long!): Track
}

type NewsListProjection {
    id: ID!
    title: String!
    catchLine: String!
    newsDate: LocalDateTime!
}

type NewsDetailsProjection {
    id: ID!
    title: String!
    content: String!
    newsDate: LocalDateTime!
    createdBy: String!
}

type Event {
    id: ID!
    title: String!
    description: String
    startDate: LocalDateTime!
    endDate: LocalDateTime!
    track: Track
    organizer: String
    price: Float
    participants: [EventMember]
    createdOn: LocalDateTime!
    createdBy: Member!
    modifiedOn: LocalDateTime
    modifiedBy: Member
}

type EventMember {
    id: ID!
    member: Member!
    event: Event!
    createdOn: LocalDateTime!
}

type Gallery {
    id: ID!
    title: String!
    description: String
    createdOn: LocalDateTime!
    modifiedOn: LocalDateTime
}

type LapRecord {
    id: ID!
    track: Track!
    member: Member
    lapTime: Int!
    recordDate: LocalDateTime!
    conditions: String!
    comments: String
    createdOn: LocalDateTime!
    modifiedOn: LocalDateTime
}

type LikedNews {
    id: ID!
    member: Member
    news: News!
    createdOn: LocalDateTime!
}

type Member {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String
    avatarUrl: String
    bike: String
    active: Boolean!
    admin: Boolean!
    eventMembers: [EventMember]
    likedNews: [LikedNews]
    registrationDate: LocalDateTime
    createdOn: LocalDateTime!
    modifiedOn: LocalDateTime
}

type News {
    id: ID!
    title: String!
    catchLine: String!
    content: String!
    newsDate: LocalDateTime
    likedNews: [LikedNews]
    createdOn: LocalDateTime!
    createdBy: Member!
    modifiedOn: LocalDateTime
    modifiedBy: Member
}

type Photo {
    id: ID!
    title: String!
    description: String
    link: String!
    gallery: Gallery!
    createdOn: LocalDateTime!
    modifiedOn: LocalDateTime
}

type Track {
    id: ID!
    name: String!
    distance: Int
    lapRecord: Int
    website: String
    latitude: Float
    longitude: Float
}

